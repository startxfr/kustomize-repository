apiVersion: v1
kind: ConfigMap
metadata:
  name: "demo-sxapi-config"
  annotations:
    openshift.io/generated-by: sx-kustomize-cli
  labels:
    app: "demo-sxapi"
    version: "0.0.11"
    app.startx.fr/scope: "base"
    app.startx.fr/cluster: "mycluster"
    app.startx.fr/env: "dev"
    app.startx.fr/component: "demo-sxapi"
    app.kubernetes.io/component: "demo-sxapi"
    app.kubernetes.io/name: "demo-sxapi-deployment"
    app.kubernetes.io/version: "0.0.11"
    app.kubernetes.io/part-of: demo
data:
  sxapi.yml: |-
    name: sxapi-example
    description: sxapi example
    version: 0.0.11
    debug: false
    resources:
      serviceinfo-sample:
        _class: serviceinfo
    log:
      filters:
        level: '0,1,2,3,4'
        type: debug,info,error,warn
    server:
      port: '8077'
      endpoints:
      - path: "/"
        desc: Display welcome message (HTML)
        body: |-
            <html>
            <head><title>Application {{name}} (based on sxapi v0.3.52)</title></head>
            <link rel="stylesheet" href="https://goo.gl/4kFNLH">
            <body><div class="container">
            <h1><span class="glyphicon glyphicon-eye-open"></span> Your API {{name}} is
            live (based on sxapi v0.3.52)</h1>
            <div class="alert alert-success" role="alert"><p>This API is {{description}}
            running on <b>{{hostname}}</b> with current release <b>v{{version}}</b></p></div>
            <div class="alert alert-info" role="alert"><p>The application signature is <b>{{appsign}}</b>
            and corespond to the example API using micro-service framework <b>{{package.name}}
            v{{package.version}}</b>.</p></div>
            <h1>Demo de deploiement</h1>
            <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>{{package.name}} v{{package.version}}</b>. {{package.description}}</div></nav>
            </div></body>
            </html>
      - path: "/health"
        resource: serviceinfo-sample
        endpoint: health
      - path: "/info"
        resource: serviceinfo-sample
        endpoint: info
      - path: "/ping"
        desc: Ping the application. Return a sample message in json
        code: '200'
        body: pong
    bot:
      lib: "/conf/mylib"
      cron:
      - id: test-cront-task
        name: Execute test cron task
        schedule: "*/1 * * * *"
        task: myCronFunction
  mylib.js: |-
    /* global $log, module */

    //'use strict';

    var mylib = {
      myCronFunction: function (config) {
        var moment = require('moment');
        $log.info("cron task " + config.id + " executed at " + moment().format('YYYY-MM-DD HH:mm:ss'));
      }
    };

    module.exports = mylib;